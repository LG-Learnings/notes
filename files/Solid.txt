S.O.L.I.D
the five basic principles of object-oriented programming and design by Uncle Bob
— which states that a class should depend on abstraction and not upon concretions (in simple terms, hard-coded)

The 5 design principles (S.O.L.I.D ):
-Single Responsibility Principle
-Open/Closed Principle
-Liskov Substitution Principle
-Interface Segregation Principle
-Dependency Inversion Principle/ Inversion of Control

Each of these principles can stand on its own and has the goal to improve the robustness and maintainability of object-oriented
applications and software components. But they also add to each other so that applying all of them makes the implementation of
each principle easier and more effective.



According to the principles, a class should concentrate on fulfilling its responsibilities and not on creating objects that it requires to fulfill those responsibilities. And that’s where dependency injection comes into play: it provides the class with the required objects.




























Implementing Inversion of Control

High-level modules (Controllers), which provide complex logic, should be easily reusable and unaffected by changes in
low-level modules(Service), which provide utility features. To achieve that, you need to introduce an abstraction that
decouples the high-level and low-level modules from each other.

Based on this idea, Robert C. Martin’s definition of the Dependency Inversion Principle consists of two parts:
High-level modules should not depend on low-level modules. Both should depend on abstractions.
Abstractions should not depend on details. Details should depend on abstractions.

An important detail of this definition is, that high-level and low-level modules depend on the abstraction.
The design principle does not just change the direction of the dependency, as you might have expected when you read its name
for the first time. It splits the dependency between the high-level and low-level modules by introducing an abstraction between
them.
So in the end, you get two dependencies:
the high-level module depends on the abstraction, and
the low-level depends on the same abstraction.

There are several methodologies for implementing inversion of control:
-Dependency Injection: The control on how dependencies are acquired by client classes no longer resides in these classes. It resides in the underlying injectors / DI framework(s) instead.
-Observer pattern: The control is transferred from the observers to the subject when it comes to reacting to changes.
-Template method pattern: The control resides in the base class that defines the template method, instead of in the subclasses, implementing the algorithm’s steps.


































dependency injection

dependency inversion principle or IoC improves the reusability of your code and limits the ripple effect if you need to change lower level classes. But even if you implement it perfectly, you still keep a dependency on the lower level class. The interface only decouples the usage of the lower level class but not its instantiation. At some place in your code, you need to instantiate the implementation of the interface. That prevents you from replacing the implementation of the interface with a different one.

The goal of the dependency injection technique is to remove this dependency by separating the usage from the creation of the object. This reduces the amount of required boilerplate code and improves flexibility.

But before we take a look at an example, I want to tell you more about the dependency injection technique.

The 4 roles in dependency injection
If you want to use this technique, you need classes that fulfill four basic roles. These are:

The service you want to use.
The client that uses the service.
An interface that’s used by the client and implemented by the service.
The injector which creates a service instance and injects it into the client.
You already implement three of these four roles by following the dependency inversion principle. The service and the client are the two classes between which the dependency inversion principle intends to remove the dependency by introducing an interface.

You can skip the interface role and inject the service object directly into the client. But by doing that, you break with the dependency inversion principle and your client has an explicit dependency on the service class. In some situations, this might be ok. But most often, it’s better to introduce an interface to remove the dependency between the client and the service implementation.

The injector is the only role that isn’t required by the dependency inversion principle. But that’s not an issue because you don’t need to implement it. All frameworks that I listed at the beginning of this article provide ready-to-use implementations of it.

As you can see, dependency injection is a great fit for applications that follow the dependency inversion principle. You already implement most of the required roles, and the dependency injection technique enables you to remove the last dependency to the service implementation.